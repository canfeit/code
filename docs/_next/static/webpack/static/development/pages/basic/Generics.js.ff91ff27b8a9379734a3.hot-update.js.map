{"version":3,"file":"static/webpack/static\\development\\pages\\basic\\Generics.js.ff91ff27b8a9379734a3.hot-update.js","sources":["webpack:///./pages/basic/Generics.js"],"sourcesContent":["import Layout from '../../layout';\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\r\n\r\nexport default () => {\r\n    return <Layout cat='basic' id='Generics'>\r\n        <SyntaxHighlighter language=\"typescript\">\r\n            {`//泛型函数，使用类型变量T表示类型。\r\nfunction identity<T>(arg: T): T {}//<>中是类型参数，声明参数arg与返回值是相同的类型\r\nlet output = identity<string>(\"myString\");//使用<>指定类型参数\r\nlet output = identity(\"myString\"); //利用类型推论根据传入的参数自动确定T的类型\r\ninterface GenericIdentityFn<T> { (arg: T): T; }//定义泛型接口\r\nlet myIdentity: GenericIdentityFn<number> = function (arg){};//使用泛型接口定义函数\r\nfunction getProperty<T, K extends keyof T>(obj: T, key: K): T[K] {}//keyof，索引类型查询操作符，keyof T，T上属性名的联合，T[K]索引访问操作符\r\ngetProperty({a:1}, \"m\"); // error: m在{a:1}主键中不存在\r\n`}\r\n        </SyntaxHighlighter>\r\n        <>rs</>\r\n        <>kt</>\r\n        <>py</>\r\n    </Layout>\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;;;;A","sourceRoot":""}